{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\monke\\\\mark-vis-demo\\\\src\\\\App.js\";\nimport './App.css';\nimport { useState } from 'react';\nimport Person from './Person.js';\nimport LinearDemo from './LinearDemo.js';\nimport PersonDemo from './PersonDemo.js';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'react-chartjs-2';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst options = {\n  title: {\n    display: true,\n    text: 'Runtime difference between Binary and Linear Search for sorted element'\n  },\n  scales: {\n    xAxes: [{\n      type: 'size',\n      display: true,\n      scaleLabel: {\n        display: true,\n        labelString: 'n'\n      }\n    }],\n    yAxes: [{\n      scaleLabel: {\n        display: true,\n        labelString: 'time (ms)'\n      }\n    }]\n  }\n};\nconst data = {\n  backgroundColor: 'rgba(206,70,90,1)',\n  labels: [\"10\", \"100\", \"200\", \"300\", \"400\", \"500\", \"600\", \"700\", \"800\", \"900\", \"1000\", \"1100\", \"1200\"],\n  datasets: [{\n    label: 'O(Log(n)) runtime',\n    data: [1, 2, 2.3, 2.47, 2.56, 2.69, 2.77, 2.84, 2.90, 2.95, 3, 3.1, 3.2],\n    backgroundColor: 'blue',\n    borderColor: 'blue',\n    borderWidth: 1 //fill: false\n\n  }, {\n    label: 'O(n) runtime',\n    data: [10, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200],\n    backgroundColor: 'red',\n    borderColor: 'red',\n    borderWidth: 1 //fill: false,\n\n  }]\n};\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"title\", {\n      children: \"CSE442 | Final Project\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"/\",\n      children: \"[Binary Search]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Team Members\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), \": Mark Lei\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"For starters: What is Binary Search?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n        children: \"Binary Search is an algorithm that lets you find the exact element in a sorted array in a faster time than linear search method. Imagine a class of student are lined up based on their height, from the shortest kid to the tallest kid. If you were asked to select the student with a height of 5'0\\\", what would you do?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"em\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), \"Well, there's multiple approaches. One way to do it is to ask them their height one by one, starting from the first person. This is what we called a linear search method. Lets hover them one by one until you find the person whos 5\\u20190.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(LinearDemo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"em\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), \"But can we improve the time it takes to find that specific target? If we have a line of 50000 students and we have to ask them one by one, it will be pretty time consuming, right? As a human being, how would you actually approach them and ask for their height?\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), \"You can find the person who's, in your opinion, closest to 5'0\\\". And since the line is sorted, you know you can at least ignore the other portion of the line since they can never be 5'0\\\". This is the general idea of binary search. Let's give it a shot.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), \"Hover on the students to ask for their height. Click on a student to see which students can be crossed off because we know they're not the target. The green boxed one is our target student we're looking for.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(PersonDemo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"em\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 9\n        }, this), \"Good job. Now you know what binary search is, lets dig into the technical stuff.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Java code for Binary Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n        children: [\"While it looked easy to perform such search algorithm as human being, it is a little trickier to implement it. We can give a decent enough estimate with human eyes, but how would we do it with machine? The quick answer is we dont. :) \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 134\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 140\n        }, this), \"Instead of telling the computer to give estimate(Which would be very computationally heavy, we are not going to dig into details here), we would tell the computer to start at the middle value.\", /*#__PURE__*/_jsxDEV(\"section\", {\n          children: /*#__PURE__*/_jsxDEV(\"em\", {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\",\n              alt: \"Human 1\",\n              width: 30,\n              height: 50\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\",\n              alt: \"Human 1\",\n              width: 30,\n              height: 55\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\",\n              alt: \"Human 1\",\n              width: 30,\n              height: 60\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\",\n              alt: \"Human 1\",\n              width: 30,\n              height: 65\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\",\n              alt: \"Human 1\",\n              width: 30,\n              height: 70\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\",\n              alt: \"Human 1\",\n              width: 30,\n              height: 75\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\",\n              alt: \"Human 1\",\n              width: 30,\n              height: 80\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\",\n              alt: \"Human 1\",\n              width: 30,\n              height: 85\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\",\n              alt: \"Human 1\",\n              width: 30,\n              height: 90\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\",\n              alt: \"Human 1\",\n              width: 30,\n              height: 95\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), \"If it is the target value, that's perfect, we have found the value we want. If not, we will calculate the difference of middle value and target value. Since it is sorted, we know which half to dump and which half to look into. In this case, the target value is bigger than mid, which means we will look into the 2nd half, as a result we will dump the first half.\", /*#__PURE__*/_jsxDEV(\"section\", {\n          children: /*#__PURE__*/_jsxDEV(\"em\", {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\",\n              alt: \"Human 1\",\n              width: 30,\n              height: 75\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\",\n              alt: \"Human 1\",\n              width: 30,\n              height: 80\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\",\n              alt: \"Human 1\",\n              width: 30,\n              height: 85\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\",\n              alt: \"Human 1\",\n              width: 30,\n              height: 90\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\",\n              alt: \"Human 1\",\n              width: 30,\n              height: 95\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), \"Now we can repeat the process again until we either find the specific target, or we let the computer yell at us that no such target exists. Here is sample skeleton code for Binary Search in Java.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n          children: [\"public int runBinarySearchIteratively(\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 11\n          }, this), \"int[] sortedArray, int key, int low, int high)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 11\n          }, this), \"int index = Integer.MAX_VALUE;\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 11\n          }, this), \"while (low greater than high)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 11\n          }, this), \"int mid = low  + ((high - low) / 2);\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this), \"if (sortedArray[mid] smaller than key)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this), \"low = mid + 1;\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this), \"else if (sortedArray[mid] greater than key)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 14\n          }, this), \"high = mid - 1;\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this), \"else if (sortedArray[mid] == key)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 14\n          }, this), \"index = mid;\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this), \"break;\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this), \"return index;\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n      children: \"As you can see in the graph, as n gets bigger, the time it takes for linear approach gets significantly longer, and that is the reason why you should use binary search for such problem.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Design Decisions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n        children: \"Most of my interaction comes down to letting the user play around with manually selecting student's height and the graph implementation. I chose to do it this way because this will make a lot of sense for my targetted audiance who has no idea what binary search is and what binary search does. Instead of giving very complex graph and explaination, I believe this should give intro level users a best learning experience.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Development Process\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n        children: \"Solo project. It took me a week or so to get it done, the hardest part is the implementation of some of my visualization.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://courses.cs.washington.edu/courses/cse442/22wi/\",\n        children: \"CSE 442 Data Visualization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"http://www.washington.edu\",\n        children: \"University of Washington\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/monke/mark-vis-demo/src/App.js"],"names":["useState","Person","LinearDemo","PersonDemo","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","register","options","title","display","text","scales","xAxes","type","scaleLabel","labelString","yAxes","data","backgroundColor","labels","datasets","label","borderColor","borderWidth","App"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport { useState } from 'react';\r\nimport Person from './Person.js';\r\nimport LinearDemo from './LinearDemo.js';\r\nimport PersonDemo from './PersonDemo.js';\r\n\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'react-chartjs-2';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\nconst options = {\r\n  title:{\r\n    display: true,\r\n    text: 'Runtime difference between Binary and Linear Search for sorted element'\r\n  },\r\n  scales: {\r\n    xAxes: [{\r\n      type:'size',\r\n      display: true,\r\n      scaleLabel:{\r\n          display: true,\r\n          labelString: 'n'\r\n      }\r\n    }],\r\n    yAxes: [{\r\n      scaleLabel:{\r\n          display: true,\r\n          labelString: 'time (ms)'\r\n      }\r\n    }]\r\n  }\r\n};\r\nconst data = {\r\n  backgroundColor: 'rgba(206,70,90,1)',\r\n  labels: [\"10\", \"100\", \"200\", \"300\",\"400\",\"500\",\"600\",\"700\",\"800\",\"900\",\"1000\",\"1100\",\"1200\"],\r\n  datasets: [{\r\n      label: 'O(Log(n)) runtime',\r\n      data: [1, 2, 2.3, 2.47, 2.56,2.69, 2.77, 2.84, 2.90, 2.95, 3, 3.1, 3.2],\r\n      backgroundColor: 'blue',\r\n      borderColor: 'blue',\r\n      borderWidth: 1,\r\n      //fill: false\r\n  }, {\r\n  label: 'O(n) runtime',\r\n      data: [10, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200],\r\n      backgroundColor: 'red',\r\n      borderColor: 'red',\r\n      borderWidth: 1,\r\n      //fill: false,\r\n  }]\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <title>CSE442 | Final Project</title>\r\n      <a href=\"/\">[Binary Search]</a>\r\n      <section>\r\n        <p>\r\n          <strong>Team Members</strong>: Mark Lei\r\n        </p>\r\n      </section>\r\n\r\n      <section>\r\n        <h2>For starters: What is Binary Search?</h2>\r\n        <em>\r\n          Binary Search is an algorithm that lets you find the exact element in a sorted array in a faster time than linear search method.\r\n          Imagine a class of student are lined up based on their height, from the shortest kid to the tallest kid. If you were asked to\r\n          select the student with a height of 5'0\", what would you do?\r\n        </em>\r\n      </section>\r\n\r\n      {/*<section>\r\n        <PersonDemo/>\r\n      </section>*/}\r\n\r\n      <section>\r\n        <em>\r\n          <br/>\r\n          Well, there's multiple approaches. One way to do it is to ask them their height one by one, starting from the first person.\r\n          This is what we called a linear search method. Lets hover them one by one until you find the person whos 5’0.\r\n        </em>\r\n      </section>\r\n\r\n      {<section>\r\n        <LinearDemo/>\r\n      </section>}\r\n\r\n      <section>\r\n        <em>\r\n          <br/>\r\n          <br/>\r\n          But can we improve the time it takes to find that specific target? If we have a line of 50000 students and we have\r\n          to ask them one by one, it will be pretty time consuming, right? As a human being, how would you actually approach them and \r\n          ask for their height?\r\n          <br/>\r\n          <br/>\r\n          You can find the person who's, in your opinion, closest to 5'0\". And since the line is sorted, you know you can at least ignore the\r\n          other portion of the line since they can never be 5'0\". This is the general idea of binary search. Let's give it a shot.\r\n          <br/>\r\n          <br/>\r\n          Hover on the students to ask for their height. Click on a student to see which students can be crossed off because we know they're not the target. The green boxed one is our target student we're looking for.\r\n        </em>\r\n      </section>\r\n\r\n      <section>\r\n        <PersonDemo/>\r\n      </section>\r\n\r\n      <section>\r\n        <em>\r\n        <br/>\r\n        <br/>\r\n        Good job. Now you know what binary search is, lets dig into the technical stuff.\r\n        </em>\r\n      </section>\r\n\r\n      <section>\r\n        <h2>Java code for Binary Search</h2>\r\n        <em>\r\n          While it looked easy to perform such search algorithm as human being, it is a little trickier to implement it.\r\n          We can give a decent enough estimate with human eyes, but how would we do it with machine? The quick answer is we dont. :) <br/> <br/>\r\n          Instead of telling the computer to give estimate(Which would be very computationally heavy, we are not going to dig into details here),\r\n          we would tell the computer to start at the middle value. \r\n          <section>\r\n            <em>\r\n              <img src=\"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\" alt=\"Human 1\" width = {30} height={50}/> \r\n              <img src=\"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\" alt=\"Human 1\" width = {30} height={55}/> \r\n              <img src=\"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\" alt=\"Human 1\" width = {30} height={60}/> \r\n              <img src=\"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\" alt=\"Human 1\" width = {30} height={65}/> \r\n              <img src=\"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\" alt=\"Human 1\" width = {30} height={70}/>\r\n              <img src=\"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\" alt=\"Human 1\" width = {30} height={75}/> \r\n              <img src=\"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\" alt=\"Human 1\" width = {30} height={80}/> \r\n              <img src=\"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\" alt=\"Human 1\" width = {30} height={85}/> \r\n              <img src=\"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\" alt=\"Human 1\" width = {30} height={90}/> \r\n              <img src=\"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\" alt=\"Human 1\" width = {30} height={95}/> \r\n            </em>\r\n          </section>\r\n          If it is the target value, that's perfect, we have found the value we want. If not, we will calculate the difference of middle value and target value.\r\n          Since it is sorted, we know which half to dump and which half to look into. In this case, the target value is bigger than mid, which means we will look \r\n          into the 2nd half, as a result we will dump the first half.\r\n          <section>\r\n            <em>\r\n              <img src=\"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\" alt=\"Human 1\" width = {30} height={75}/> \r\n              <img src=\"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\" alt=\"Human 1\" width = {30} height={80}/> \r\n              <img src=\"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\" alt=\"Human 1\" width = {30} height={85}/> \r\n              <img src=\"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\" alt=\"Human 1\" width = {30} height={90}/> \r\n              <img src=\"https://cdn.pixabay.com/photo/2014/03/24/13/50/thinking-294525_1280.png\" alt=\"Human 1\" width = {30} height={95}/> \r\n            </em>\r\n          </section>\r\n          Now we can repeat the process again until we either find the specific target, or we let the computer yell at us that no such target exists. Here is sample skeleton code for Binary Search in Java.\r\n          <br/>\r\n          <em>\r\n          public int runBinarySearchIteratively(\r\n          <br/>\r\n          int[] sortedArray, int key, int low, int high) \r\n          <br/>\r\n          int index = Integer.MAX_VALUE; \r\n          <br/>  \r\n          while (low greater than high) \r\n          <br/>\r\n            int mid = low  + ((high - low) / 2);\r\n            <br/>\r\n            if (sortedArray[mid] smaller than key)\r\n            <br/>\r\n              low = mid + 1;\r\n              <br/>\r\n             else if (sortedArray[mid] greater than key) \r\n             <br/>\r\n              high = mid - 1;\r\n              <br/>\r\n             else if (sortedArray[mid] == key) \r\n             <br/>\r\n              index = mid;\r\n              <br/>\r\n              break;\r\n              <br/>\r\n            return index;\r\n            <br/>\r\n          </em>\r\n          <br/>\r\n        </em>\r\n      </section>\r\n\r\n      <Line options={options} data={data}/>\r\n      <em>\r\n        As you can see in the graph, as n gets bigger, the time it takes for linear approach gets significantly longer, and that is the reason why you should use binary search for such problem.\r\n      </em>\r\n      <section>\r\n        <h2>Design Decisions</h2>\r\n        <em>\r\n          Most of my interaction comes down to letting the user play around with manually selecting student's height and the graph implementation.\r\n          I chose to do it this way because this will make a lot of sense for my targetted audiance who has no idea what binary search is and what binary search does.\r\n          Instead of giving very complex graph and explaination, I believe this should give intro level users a best learning experience.\r\n        </em>\r\n      </section>\r\n\r\n      <section>\r\n        <h2>Development Process</h2>\r\n        <em>Solo project. It took me a week or so to get it done, the hardest part is the implementation of some of my visualization.</em>\r\n      </section>\r\n      <div class=\"footer\">\r\n        <a href=\"https://courses.cs.washington.edu/courses/cse442/22wi/\">CSE 442 Data Visualization</a>\r\n        <br/>\r\n        <a href=\"http://www.washington.edu\">University of Washington</a>\r\n      </div>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}